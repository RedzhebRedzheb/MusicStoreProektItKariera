@using MusicStore.Models
@model Order

@{
    ViewData["Title"] = "Order Details";
}

<div class="container">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h1>Order #@Model.Id</h1>
        <a asp-action="Index" class="btn btn-secondary">
            <i class="fas fa-arrow-left"></i> Back to List
        </a>
    </div>

    @if (TempData["ErrorMessage"] != null)
    {
        <div class="alert alert-danger mb-4">@TempData["ErrorMessage"]</div>
    }
    @if (TempData["SuccessMessage"] != null)
    {
        <div class="alert alert-success mb-4">@TempData["SuccessMessage"]</div>
    }

    <div class="card mb-4">
        <div class="card-header">
            <h5 class="mb-0">Order Summary</h5>
        </div>
        <div class="card-body">
            <div class="row">
                <div class="col-md-6">
                    <dl class="row">
                        <dt class="col-sm-4">Order Date:</dt>
                        <dd class="col-sm-8">@Model.OrderDate.ToString("f")</dd>

                        <dt class="col-sm-4">Current Status:</dt>
                        <dd class="col-sm-8">
                            <span class="badge bg-@GetStatusBadge(Model.Status)">
                                @Model.Status
                            </span>
                        </dd>
                    </dl>
                </div>
                <div class="col-md-6">
                    <dl class="row">
                        <dt class="col-sm-4">Total Amount:</dt>
                        <dd class="col-sm-8">@Model.TotalPrice.ToString("C")</dd>

                        <dt class="col-sm-4">Customer:</dt>
                        <dd class="col-sm-8">@Model.User.Email</dd>
                    </dl>
                </div>
            </div>
        </div>
    </div>

    <div class="card mb-4">
        <div class="card-header">
            <h5 class="mb-0">Order Items</h5>
        </div>
        <div class="card-body">
            <table class="table">
                <thead>
                    <tr>
                        <th>Product</th>
                        <th class="text-end">Price</th>
                        <th class="text-end">Quantity</th>
                        <th class="text-end">Total</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in Model.OrderItems)
                    {
                        <tr>
                            <td>@item.Product.Name</td>
                            <td class="text-end">@item.UnitPrice.ToString("C")</td>
                            <td class="text-end">@item.Quantity</td>
                            <td class="text-end">@((item.UnitPrice * item.Quantity).ToString("C"))</td>
                        </tr>
                    }
                </tbody>
                <tfoot>
                    <tr>
                        <th colspan="3" class="text-end">Grand Total:</th>
                        <th class="text-end">@Model.TotalPrice.ToString("C")</th>
                    </tr>
                </tfoot>
            </table>
        </div>
    </div>

    @if (User.IsInRole("Admin"))
    {
        <div class="card border-primary">
            <div class="card-header bg-primary text-white">
                <h5 class="mb-0">Administrator Controls</h5>
            </div>
            <div class="card-body">
                <form asp-action="UpdateStatus" method="post">
                    @Html.AntiForgeryToken()
                    <input type="hidden" name="id" value="@Model.Id" />

                    <div class="row g-3 align-items-center">
                        <div class="col-auto">
                            <label class="form-label">Update Status:</label>
                        </div>
                        <div class="col-auto">
                            <select name="status" class="form-select">
                                <option value="Pending" selected="@(Model.Status == "Pending")">Pending</option>
                                <option value="Processing" selected="@(Model.Status == "Processing")">Processing</option>
                                <option value="Shipped" selected="@(Model.Status == "Shipped")">Shipped</option>
                                <option value="Delivered" selected="@(Model.Status == "Delivered")">Delivered</option>
                                <option value="Cancelled" selected="@(Model.Status == "Cancelled")">Cancelled</option>
                            </select>
                        </div>
                        <div class="col-auto">
                            <button type="submit" class="btn btn-primary">
                                <i class="fas fa-save"></i> Update
                            </button>
                        </div>
                    </div>
                </form>

                @if (Model.Status == "Cancelled")
                {
                    <div class="alert alert-warning mt-3">
                        <h5>Stock Impact:</h5>
                        <p class="mb-0">
                            @Model.OrderItems.Sum(oi => oi.Quantity) items restored to inventory
                        </p>
                    </div>
                }
            </div>
        </div>
    }
</div>

@functions {
    string GetStatusBadge(string status) => status switch
    {
        "Pending" => "warning",
        "Processing" => "primary",
        "Shipped" => "success",
        "Delivered" => "dark",
        "Cancelled" => "danger",
        _ => "secondary"
    };
}